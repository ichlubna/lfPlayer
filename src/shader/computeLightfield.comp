#version 450
#include "computeHeader.glsl"

void main()
{
    if(any(greaterThan(outCoord,ivec2(WIDTH,HEIGHT))))
        return;
    
    vec4 color = vec4(0);
    vec4 pixel = texture(sampler2D(textures[FOCUSMAP_TEXTURE_ID], textSampler), outUV);
    int minSample = int(round(SAMPLE_COUNT*pixel.x));

    float invalid = pixel.y;
    for(int i=0; i<4; i++)
        invalid += texture(sampler2D(textures[FOCUSMAP_TEXTURE_ID], textSampler), outUV+(vec2(1.0f,1.01f)-2*vec2(i/2, i%2))*HALF_PX_SIZE*3).y;
    if(invalid > 0.0f)
        minSample = int(round(SAMPLE_COUNT*medianLoad(32, outUV, FOCUSMAP_TEXTURE_ID)));  
   
    for(int j=0; j<4; j++)
        color += lfFrameWeight(j)*texture(sampler2D(textures[2+j], textSampler),lfFrameOffset(j)*calculateFocus(minSample)*rangeLimit*vec2(ASPECT_RATIO, 1.0f)+outUV);
   
    color = vec4(float(minSample)/SAMPLE_COUNT); 
    color.w = 1.0f;
    imageStore(images[OUTPUT_TEXTURE_ID], outCoord, color);
}

